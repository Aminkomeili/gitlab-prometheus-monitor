gitlab-prometheus-monitor
رای مانیتورینگ فعالیت‌هایGitLab با استفاده از Prometheus، می‌توانید از کتابخانه prometheus_client استفاده کنید.
در کد زیر، یک مثال از یک برنامه Python است که فعالیت‌های GitLab را با استفاده از API GitLab جمع‌آوری کرده و متریک‌های Prometheus را با استفاده از کتابخانه prometheus_client تولید می‌کند:

این کد، متریک‌های Prometheus برای تعداد مرج‌ریکوست‌ها و ایشوهای یک پروژه GitLab در یک بازه زمانی خاص تولید می‌کند. متریک‌ها با نام merge_requests_count و issue_count تعریف شده‌اند و هر ۱۰ ثانیه یک‌بار به روزرسانی می‌شوند.
با اجرای این کد، می‌توانید به لوکال‌هاست http://localhost:8000 دسترسی داشته باشید و متریک‌های Prometheus را دریافت کنید. سپس با استفاده از Prometheus، می‌توانید متریک‌های تولید شده را مانیتور کنید.

-------------------------------------------------------------------------------------------------------------------------------------------------------
prometheus-func
برای اضافه کردن متریک جدید به این کد، می‌توانید از کلاس‌های Prometheus مانند Counter و Histogram و Summary استفاده کنید. به عنوان مثال، می‌توانید یک Counter برای تعداد فایل‌های موجود در یک پروژه GitLab اضافه کنید:
در این مثال، ما یک Counter با نام file_count و توضیحاتی در مورد تعداد فایل‌ها در پروژه اضافه کرده‌ایم. سپس در تابع update_metrics()، لیست تمام فایل‌های پروژه را با استفاده از تابع gl.project_files.list() دریافت و تعداد فایل‌های آن را به عنوان افزایش دهنده Counter استفاده می‌کنیم. سپس متریک جدید را در پایان تابع با استفاده از تابع inc() تنظیم می‌کنیم.
شما می‌توانید هر نوع متریک دیگری که می‌خواهید به این کد اضافه کنید، به شرطی که کلاس مناسبی مانند Counter، Gauge، Histogram و یا Summary را انتخاب کنید و تابع set() یا inc() را به درستی برای آن تنظیم کنید.

